// Code generated by protoc-gen-go. DO NOT EDIT.
// source: token.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Token int32

const (
	Token_ILLEGAL        Token = 0
	Token_EOF            Token = 1
	Token_COMMENT        Token = 2
	Token_IDENT          Token = 4
	Token_INT            Token = 5
	Token_FLOAT          Token = 6
	Token_IMAG           Token = 7
	Token_CHAR           Token = 8
	Token_STRING         Token = 9
	Token_ADD            Token = 12
	Token_SUB            Token = 13
	Token_MUL            Token = 14
	Token_QUO            Token = 15
	Token_REM            Token = 16
	Token_AND            Token = 17
	Token_OR             Token = 18
	Token_XOR            Token = 19
	Token_SHL            Token = 20
	Token_SHR            Token = 21
	Token_AND_NOT        Token = 22
	Token_ADD_ASSIGN     Token = 23
	Token_SUB_ASSIGN     Token = 24
	Token_MUL_ASSIGN     Token = 25
	Token_QUO_ASSIGN     Token = 26
	Token_REM_ASSIGN     Token = 27
	Token_AND_ASSIGN     Token = 28
	Token_OR_ASSIGN      Token = 29
	Token_XOR_ASSIGN     Token = 30
	Token_SHL_ASSIGN     Token = 31
	Token_SHR_ASSIGN     Token = 32
	Token_AND_NOT_ASSIGN Token = 33
	Token_LAND           Token = 34
	Token_LOR            Token = 35
	Token_ARROW          Token = 36
	Token_INC            Token = 37
	Token_DEC            Token = 38
	Token_EQL            Token = 39
	Token_LSS            Token = 40
	Token_GTR            Token = 41
	Token_ASSIGN         Token = 42
	Token_NOT            Token = 43
	Token_NEQ            Token = 44
	Token_LEQ            Token = 45
	Token_GEQ            Token = 46
	Token_DEFINE         Token = 47
	Token_ELLIPSIS       Token = 48
	Token_LPAREN         Token = 49
	Token_LBRACK         Token = 50
	Token_LBRACE         Token = 51
	Token_COMMA          Token = 52
	Token_PERIOD         Token = 53
	Token_RPAREN         Token = 54
	Token_RBRACK         Token = 55
	Token_RBRACE         Token = 56
	Token_SEMICOLON      Token = 57
	Token_COLON          Token = 58
	Token_BREAK          Token = 61
	Token_CASE           Token = 62
	Token_CHAN           Token = 63
	Token_CONST          Token = 64
	Token_CONTINUE       Token = 65
	Token_DEFAULT        Token = 66
	Token_DEFER          Token = 67
	Token_ELSE           Token = 68
	Token_FALLTHROUGH    Token = 69
	Token_FOR            Token = 70
	Token_FUNC           Token = 71
	Token_GO             Token = 72
	Token_GOTO           Token = 73
	Token_IF             Token = 74
	Token_IMPORT         Token = 75
	Token_INTERFACE      Token = 76
	Token_MAP            Token = 77
	Token_PACKAGE        Token = 78
	Token_RANGE          Token = 79
	Token_RETURN         Token = 80
	Token_SELECT         Token = 81
	Token_STRUCT         Token = 82
	Token_SWITCH         Token = 83
	Token_TYPE           Token = 84
	Token_VAR            Token = 85
)

var Token_name = map[int32]string{
	0:  "ILLEGAL",
	1:  "EOF",
	2:  "COMMENT",
	4:  "IDENT",
	5:  "INT",
	6:  "FLOAT",
	7:  "IMAG",
	8:  "CHAR",
	9:  "STRING",
	12: "ADD",
	13: "SUB",
	14: "MUL",
	15: "QUO",
	16: "REM",
	17: "AND",
	18: "OR",
	19: "XOR",
	20: "SHL",
	21: "SHR",
	22: "AND_NOT",
	23: "ADD_ASSIGN",
	24: "SUB_ASSIGN",
	25: "MUL_ASSIGN",
	26: "QUO_ASSIGN",
	27: "REM_ASSIGN",
	28: "AND_ASSIGN",
	29: "OR_ASSIGN",
	30: "XOR_ASSIGN",
	31: "SHL_ASSIGN",
	32: "SHR_ASSIGN",
	33: "AND_NOT_ASSIGN",
	34: "LAND",
	35: "LOR",
	36: "ARROW",
	37: "INC",
	38: "DEC",
	39: "EQL",
	40: "LSS",
	41: "GTR",
	42: "ASSIGN",
	43: "NOT",
	44: "NEQ",
	45: "LEQ",
	46: "GEQ",
	47: "DEFINE",
	48: "ELLIPSIS",
	49: "LPAREN",
	50: "LBRACK",
	51: "LBRACE",
	52: "COMMA",
	53: "PERIOD",
	54: "RPAREN",
	55: "RBRACK",
	56: "RBRACE",
	57: "SEMICOLON",
	58: "COLON",
	61: "BREAK",
	62: "CASE",
	63: "CHAN",
	64: "CONST",
	65: "CONTINUE",
	66: "DEFAULT",
	67: "DEFER",
	68: "ELSE",
	69: "FALLTHROUGH",
	70: "FOR",
	71: "FUNC",
	72: "GO",
	73: "GOTO",
	74: "IF",
	75: "IMPORT",
	76: "INTERFACE",
	77: "MAP",
	78: "PACKAGE",
	79: "RANGE",
	80: "RETURN",
	81: "SELECT",
	82: "STRUCT",
	83: "SWITCH",
	84: "TYPE",
	85: "VAR",
}
var Token_value = map[string]int32{
	"ILLEGAL":        0,
	"EOF":            1,
	"COMMENT":        2,
	"IDENT":          4,
	"INT":            5,
	"FLOAT":          6,
	"IMAG":           7,
	"CHAR":           8,
	"STRING":         9,
	"ADD":            12,
	"SUB":            13,
	"MUL":            14,
	"QUO":            15,
	"REM":            16,
	"AND":            17,
	"OR":             18,
	"XOR":            19,
	"SHL":            20,
	"SHR":            21,
	"AND_NOT":        22,
	"ADD_ASSIGN":     23,
	"SUB_ASSIGN":     24,
	"MUL_ASSIGN":     25,
	"QUO_ASSIGN":     26,
	"REM_ASSIGN":     27,
	"AND_ASSIGN":     28,
	"OR_ASSIGN":      29,
	"XOR_ASSIGN":     30,
	"SHL_ASSIGN":     31,
	"SHR_ASSIGN":     32,
	"AND_NOT_ASSIGN": 33,
	"LAND":           34,
	"LOR":            35,
	"ARROW":          36,
	"INC":            37,
	"DEC":            38,
	"EQL":            39,
	"LSS":            40,
	"GTR":            41,
	"ASSIGN":         42,
	"NOT":            43,
	"NEQ":            44,
	"LEQ":            45,
	"GEQ":            46,
	"DEFINE":         47,
	"ELLIPSIS":       48,
	"LPAREN":         49,
	"LBRACK":         50,
	"LBRACE":         51,
	"COMMA":          52,
	"PERIOD":         53,
	"RPAREN":         54,
	"RBRACK":         55,
	"RBRACE":         56,
	"SEMICOLON":      57,
	"COLON":          58,
	"BREAK":          61,
	"CASE":           62,
	"CHAN":           63,
	"CONST":          64,
	"CONTINUE":       65,
	"DEFAULT":        66,
	"DEFER":          67,
	"ELSE":           68,
	"FALLTHROUGH":    69,
	"FOR":            70,
	"FUNC":           71,
	"GO":             72,
	"GOTO":           73,
	"IF":             74,
	"IMPORT":         75,
	"INTERFACE":      76,
	"MAP":            77,
	"PACKAGE":        78,
	"RANGE":          79,
	"RETURN":         80,
	"SELECT":         81,
	"STRUCT":         82,
	"SWITCH":         83,
	"TYPE":           84,
	"VAR":            85,
}

func (x Token) String() string {
	return proto.EnumName(Token_name, int32(x))
}
func (Token) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_token_d73016b118369024, []int{0}
}

func init() {
	proto.RegisterEnum("pb.Token", Token_name, Token_value)
}

func init() { proto.RegisterFile("token.proto", fileDescriptor_token_d73016b118369024) }

var fileDescriptor_token_d73016b118369024 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x93, 0x49, 0x6f, 0xdc, 0x38,
	0x10, 0x85, 0x67, 0x3c, 0x76, 0xb7, 0x4d, 0x6f, 0x6f, 0x38, 0x93, 0x7d, 0xdf, 0x13, 0x27, 0x71,
	0x16, 0x67, 0x07, 0xb2, 0xb0, 0xa5, 0x92, 0xc4, 0x34, 0x45, 0x4a, 0x5c, 0x62, 0xe7, 0x64, 0xc0,
	0x40, 0x4e, 0x01, 0x62, 0x23, 0xf0, 0x7f, 0xca, 0xdf, 0x0c, 0x8a, 0xea, 0xee, 0xdc, 0xbe, 0x57,
	0x7c, 0x55, 0x2a, 0x96, 0x8a, 0x62, 0xfd, 0xf4, 0xf8, 0xfb, 0xb7, 0x1f, 0xbb, 0x27, 0x3f, 0x8f,
	0x4f, 0x8f, 0xe5, 0xd2, 0xc9, 0xd1, 0xce, 0xaf, 0xb1, 0x58, 0x89, 0x1c, 0x93, 0xeb, 0x62, 0xac,
	0x8d, 0xa1, 0x5a, 0x19, 0xfc, 0x25, 0xc7, 0xe2, 0x1f, 0x72, 0x15, 0xfe, 0xe6, 0x68, 0xe1, 0xda,
	0x96, 0x6c, 0xc4, 0x92, 0x5c, 0x13, 0x2b, 0xba, 0x64, 0x5c, 0x66, 0x83, 0xb6, 0x11, 0x2b, 0x1c,
	0xab, 0x8c, 0x53, 0x11, 0x23, 0xb9, 0x2a, 0x96, 0x75, 0xab, 0x6a, 0x8c, 0x99, 0x8a, 0x46, 0x79,
	0xac, 0x4a, 0x21, 0x46, 0x21, 0x7a, 0x6d, 0x6b, 0xac, 0x71, 0x8e, 0x2a, 0x4b, 0x6c, 0x30, 0x84,
	0x34, 0xc1, 0x26, 0x43, 0x9b, 0x0c, 0xb6, 0x18, 0xfa, 0xe4, 0xb0, 0xcd, 0xe0, 0xa9, 0x05, 0xb2,
	0xd9, 0x96, 0xf8, 0x57, 0x8e, 0xc4, 0x92, 0xf3, 0x90, 0x1c, 0x38, 0x70, 0x1e, 0xff, 0xe5, 0xec,
	0xc6, 0xe0, 0xff, 0x01, 0x3c, 0xce, 0x70, 0x93, 0xca, 0x96, 0x87, 0xd6, 0x45, 0x9c, 0x95, 0x5b,
	0x42, 0xa8, 0xb2, 0x3c, 0x54, 0x21, 0xe8, 0xda, 0xe2, 0x1c, 0xeb, 0x90, 0x26, 0x73, 0x7d, 0x9e,
	0x75, 0x9b, 0xcc, 0x5c, 0x5f, 0x60, 0xdd, 0x27, 0x37, 0xd7, 0x17, 0x59, 0x7b, 0x6a, 0xe7, 0xfa,
	0x52, 0xae, 0x67, 0x17, 0xf5, 0x2e, 0xcb, 0x4d, 0xb1, 0xe6, 0xfc, 0x5c, 0x5e, 0xe1, 0xe3, 0x83,
	0x3f, 0xfa, 0x6a, 0xfe, 0x5c, 0xb3, 0x28, 0x7f, 0x6d, 0xd0, 0x8b, 0xf3, 0xeb, 0x52, 0x8a, 0xad,
	0x59, 0xaf, 0xf3, 0xd8, 0x0d, 0x1e, 0x97, 0xe1, 0xcb, 0xde, 0xe4, 0x2b, 0x19, 0xe7, 0x71, 0x8b,
	0xc7, 0xaa, 0xbc, 0x77, 0xfb, 0xb8, 0x3d, 0x8c, 0xba, 0xc0, 0x1d, 0x86, 0x92, 0x0a, 0xdc, 0xcd,
	0x7f, 0xa7, 0x37, 0xb8, 0x97, 0xed, 0x21, 0xe0, 0x3e, 0x43, 0x1d, 0x3d, 0x1e, 0xf0, 0xbc, 0x67,
	0x65, 0x77, 0x38, 0xc8, 0x23, 0x79, 0x98, 0x81, 0x7a, 0x3c, 0xca, 0x7e, 0xea, 0xf1, 0x38, 0xfb,
	0xa9, 0xc7, 0x2e, 0xfb, 0x4b, 0xaa, 0xb4, 0x25, 0x3c, 0x91, 0x1b, 0x62, 0x95, 0x8c, 0xd1, 0x5d,
	0xd0, 0x01, 0x4f, 0xf9, 0xc4, 0x74, 0xca, 0x93, 0xc5, 0xb3, 0xcc, 0x13, 0xaf, 0x8a, 0x29, 0x9e,
	0x2f, 0x98, 0xb0, 0xc7, 0x5d, 0xf2, 0x76, 0x28, 0xbc, 0xe0, 0x70, 0x47, 0x5e, 0xbb, 0x12, 0x2f,
	0x99, 0xfd, 0x90, 0xfa, 0x2a, 0xf3, 0x90, 0xfa, 0x7a, 0xc1, 0x84, 0x37, 0x3c, 0xc6, 0x40, 0xad,
	0x2e, 0x9c, 0x71, 0x16, 0x6f, 0x87, 0x4a, 0x8c, 0xef, 0x18, 0x27, 0x9e, 0xd4, 0x14, 0xef, 0xf3,
	0x1e, 0xa9, 0x40, 0xf8, 0x30, 0xdb, 0x28, 0x8b, 0x8f, 0x83, 0xd3, 0x86, 0x88, 0x4f, 0xdc, 0x70,
	0xe1, 0x6c, 0xd4, 0x36, 0x11, 0x14, 0x6f, 0x41, 0x49, 0x95, 0x4a, 0x26, 0x62, 0xc2, 0xae, 0x92,
	0x2a, 0xf2, 0x28, 0x38, 0x95, 0x4c, 0x20, 0x94, 0x72, 0x5b, 0xac, 0x57, 0xca, 0x98, 0xd8, 0x78,
	0x97, 0xea, 0x06, 0xc4, 0x63, 0xa8, 0x9c, 0x47, 0xc5, 0x9e, 0x2a, 0xd9, 0x02, 0x35, 0xaf, 0x5b,
	0xed, 0xd0, 0x70, 0xa4, 0x76, 0xd1, 0x41, 0x73, 0x44, 0x57, 0xf8, 0xcc, 0xdd, 0xeb, 0xb6, 0x73,
	0x3e, 0x62, 0xca, 0xdd, 0x6b, 0x1b, 0xc9, 0x57, 0x7c, 0x19, 0x93, 0xf7, 0x58, 0x75, 0x68, 0xb9,
	0x87, 0x4e, 0x15, 0x53, 0x55, 0x13, 0x2c, 0xf7, 0xe0, 0x95, 0xad, 0x09, 0x2e, 0xdf, 0x9c, 0x62,
	0xf2, 0x16, 0x5d, 0x7e, 0x12, 0x64, 0xa8, 0x88, 0xe8, 0x67, 0xcf, 0x23, 0x15, 0x11, 0x3e, 0xf3,
	0xbe, 0x8e, 0x45, 0x83, 0xc0, 0x5f, 0x8f, 0x5f, 0x3b, 0x42, 0xe4, 0xd2, 0x5f, 0x94, 0x47, 0x3a,
	0x1a, 0xe5, 0x47, 0xbb, 0xf7, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x23, 0x24, 0xf5, 0x76, 0xc3, 0x03,
	0x00, 0x00,
}
