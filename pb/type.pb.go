// Code generated by protoc-gen-go. DO NOT EDIT.
// source: type.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TypeBasic_Kind int32

const (
	TypeBasic_INVALID         TypeBasic_Kind = 0
	TypeBasic_BOOL            TypeBasic_Kind = 1
	TypeBasic_INT             TypeBasic_Kind = 2
	TypeBasic_INT_8           TypeBasic_Kind = 3
	TypeBasic_INT_16          TypeBasic_Kind = 4
	TypeBasic_INT_32          TypeBasic_Kind = 5
	TypeBasic_INT_64          TypeBasic_Kind = 6
	TypeBasic_UINT            TypeBasic_Kind = 7
	TypeBasic_UINT_8          TypeBasic_Kind = 8
	TypeBasic_UINT_16         TypeBasic_Kind = 9
	TypeBasic_UINT_32         TypeBasic_Kind = 10
	TypeBasic_UINT_64         TypeBasic_Kind = 11
	TypeBasic_UINT_PTR        TypeBasic_Kind = 12
	TypeBasic_FLOAT_32        TypeBasic_Kind = 13
	TypeBasic_FLOAT_64        TypeBasic_Kind = 14
	TypeBasic_COMPLEX_64      TypeBasic_Kind = 15
	TypeBasic_COMPLEX_128     TypeBasic_Kind = 16
	TypeBasic_STRING          TypeBasic_Kind = 17
	TypeBasic_UNSAFE_POINTER  TypeBasic_Kind = 18
	TypeBasic_UNTYPED_BOOL    TypeBasic_Kind = 19
	TypeBasic_UNTYPED_INT     TypeBasic_Kind = 20
	TypeBasic_UNTYPED_RUNE    TypeBasic_Kind = 21
	TypeBasic_UNTYPED_FLOAT   TypeBasic_Kind = 22
	TypeBasic_UNTYPED_COMPLEX TypeBasic_Kind = 23
	TypeBasic_UNTYPED_STRING  TypeBasic_Kind = 24
	TypeBasic_UNTYPED_NIL     TypeBasic_Kind = 25
)

var TypeBasic_Kind_name = map[int32]string{
	0:  "INVALID",
	1:  "BOOL",
	2:  "INT",
	3:  "INT_8",
	4:  "INT_16",
	5:  "INT_32",
	6:  "INT_64",
	7:  "UINT",
	8:  "UINT_8",
	9:  "UINT_16",
	10: "UINT_32",
	11: "UINT_64",
	12: "UINT_PTR",
	13: "FLOAT_32",
	14: "FLOAT_64",
	15: "COMPLEX_64",
	16: "COMPLEX_128",
	17: "STRING",
	18: "UNSAFE_POINTER",
	19: "UNTYPED_BOOL",
	20: "UNTYPED_INT",
	21: "UNTYPED_RUNE",
	22: "UNTYPED_FLOAT",
	23: "UNTYPED_COMPLEX",
	24: "UNTYPED_STRING",
	25: "UNTYPED_NIL",
}
var TypeBasic_Kind_value = map[string]int32{
	"INVALID":         0,
	"BOOL":            1,
	"INT":             2,
	"INT_8":           3,
	"INT_16":          4,
	"INT_32":          5,
	"INT_64":          6,
	"UINT":            7,
	"UINT_8":          8,
	"UINT_16":         9,
	"UINT_32":         10,
	"UINT_64":         11,
	"UINT_PTR":        12,
	"FLOAT_32":        13,
	"FLOAT_64":        14,
	"COMPLEX_64":      15,
	"COMPLEX_128":     16,
	"STRING":          17,
	"UNSAFE_POINTER":  18,
	"UNTYPED_BOOL":    19,
	"UNTYPED_INT":     20,
	"UNTYPED_RUNE":    21,
	"UNTYPED_FLOAT":   22,
	"UNTYPED_COMPLEX": 23,
	"UNTYPED_STRING":  24,
	"UNTYPED_NIL":     25,
}

func (x TypeBasic_Kind) String() string {
	return proto.EnumName(TypeBasic_Kind_name, int32(x))
}
func (TypeBasic_Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{4, 0}
}

type ConstantValue struct {
	// Types that are valid to be assigned to Value:
	//	*ConstantValue_Unknown
	//	*ConstantValue_Bool
	//	*ConstantValue_String_
	//	*ConstantValue_Int
	//	*ConstantValue_Float
	//	*ConstantValue_Complex
	Value                isConstantValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ConstantValue) Reset()         { *m = ConstantValue{} }
func (m *ConstantValue) String() string { return proto.CompactTextString(m) }
func (*ConstantValue) ProtoMessage()    {}
func (*ConstantValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{0}
}
func (m *ConstantValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConstantValue.Unmarshal(m, b)
}
func (m *ConstantValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConstantValue.Marshal(b, m, deterministic)
}
func (dst *ConstantValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConstantValue.Merge(dst, src)
}
func (m *ConstantValue) XXX_Size() int {
	return xxx_messageInfo_ConstantValue.Size(m)
}
func (m *ConstantValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ConstantValue.DiscardUnknown(m)
}

var xxx_messageInfo_ConstantValue proto.InternalMessageInfo

type isConstantValue_Value interface {
	isConstantValue_Value()
}

type ConstantValue_Unknown struct {
	Unknown string `protobuf:"bytes,1,opt,name=unknown,oneof"`
}
type ConstantValue_Bool struct {
	Bool bool `protobuf:"varint,2,opt,name=bool,oneof"`
}
type ConstantValue_String_ struct {
	String_ string `protobuf:"bytes,3,opt,name=string,oneof"`
}
type ConstantValue_Int struct {
	Int string `protobuf:"bytes,4,opt,name=int,oneof"`
}
type ConstantValue_Float struct {
	Float float64 `protobuf:"fixed64,5,opt,name=float,oneof"`
}
type ConstantValue_Complex struct {
	Complex string `protobuf:"bytes,6,opt,name=complex,oneof"`
}

func (*ConstantValue_Unknown) isConstantValue_Value() {}
func (*ConstantValue_Bool) isConstantValue_Value()    {}
func (*ConstantValue_String_) isConstantValue_Value() {}
func (*ConstantValue_Int) isConstantValue_Value()     {}
func (*ConstantValue_Float) isConstantValue_Value()   {}
func (*ConstantValue_Complex) isConstantValue_Value() {}

func (m *ConstantValue) GetValue() isConstantValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ConstantValue) GetUnknown() string {
	if x, ok := m.GetValue().(*ConstantValue_Unknown); ok {
		return x.Unknown
	}
	return ""
}

func (m *ConstantValue) GetBool() bool {
	if x, ok := m.GetValue().(*ConstantValue_Bool); ok {
		return x.Bool
	}
	return false
}

func (m *ConstantValue) GetString_() string {
	if x, ok := m.GetValue().(*ConstantValue_String_); ok {
		return x.String_
	}
	return ""
}

func (m *ConstantValue) GetInt() string {
	if x, ok := m.GetValue().(*ConstantValue_Int); ok {
		return x.Int
	}
	return ""
}

func (m *ConstantValue) GetFloat() float64 {
	if x, ok := m.GetValue().(*ConstantValue_Float); ok {
		return x.Float
	}
	return 0
}

func (m *ConstantValue) GetComplex() string {
	if x, ok := m.GetValue().(*ConstantValue_Complex); ok {
		return x.Complex
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ConstantValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ConstantValue_OneofMarshaler, _ConstantValue_OneofUnmarshaler, _ConstantValue_OneofSizer, []interface{}{
		(*ConstantValue_Unknown)(nil),
		(*ConstantValue_Bool)(nil),
		(*ConstantValue_String_)(nil),
		(*ConstantValue_Int)(nil),
		(*ConstantValue_Float)(nil),
		(*ConstantValue_Complex)(nil),
	}
}

func _ConstantValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ConstantValue)
	// value
	switch x := m.Value.(type) {
	case *ConstantValue_Unknown:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Unknown)
	case *ConstantValue_Bool:
		t := uint64(0)
		if x.Bool {
			t = 1
		}
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *ConstantValue_String_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.String_)
	case *ConstantValue_Int:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Int)
	case *ConstantValue_Float:
		b.EncodeVarint(5<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.Float))
	case *ConstantValue_Complex:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Complex)
	case nil:
	default:
		return fmt.Errorf("ConstantValue.Value has unexpected type %T", x)
	}
	return nil
}

func _ConstantValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ConstantValue)
	switch tag {
	case 1: // value.unknown
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &ConstantValue_Unknown{x}
		return true, err
	case 2: // value.bool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &ConstantValue_Bool{x != 0}
		return true, err
	case 3: // value.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &ConstantValue_String_{x}
		return true, err
	case 4: // value.int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &ConstantValue_Int{x}
		return true, err
	case 5: // value.float
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &ConstantValue_Float{math.Float64frombits(x)}
		return true, err
	case 6: // value.complex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &ConstantValue_Complex{x}
		return true, err
	default:
		return false, nil
	}
}

func _ConstantValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ConstantValue)
	// value
	switch x := m.Value.(type) {
	case *ConstantValue_Unknown:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Unknown)))
		n += len(x.Unknown)
	case *ConstantValue_Bool:
		n += 1 // tag and wire
		n += 1
	case *ConstantValue_String_:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case *ConstantValue_Int:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Int)))
		n += len(x.Int)
	case *ConstantValue_Float:
		n += 1 // tag and wire
		n += 8
	case *ConstantValue_Complex:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Complex)))
		n += len(x.Complex)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TypeRef struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypeRef) Reset()         { *m = TypeRef{} }
func (m *TypeRef) String() string { return proto.CompactTextString(m) }
func (*TypeRef) ProtoMessage()    {}
func (*TypeRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{1}
}
func (m *TypeRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeRef.Unmarshal(m, b)
}
func (m *TypeRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeRef.Marshal(b, m, deterministic)
}
func (dst *TypeRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeRef.Merge(dst, src)
}
func (m *TypeRef) XXX_Size() int {
	return xxx_messageInfo_TypeRef.Size(m)
}
func (m *TypeRef) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeRef.DiscardUnknown(m)
}

var xxx_messageInfo_TypeRef proto.InternalMessageInfo

func (m *TypeRef) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Type struct {
	Package string `protobuf:"bytes,1,opt,name=package" json:"package,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Type_TypeArray
	//	*Type_TypeBasic
	//	*Type_TypeBuiltin
	//	*Type_TypeChan
	//	*Type_TypeConst
	//	*Type_TypeFunc
	//	*Type_TypeInterface
	//	*Type_TypeLabel
	//	*Type_TypeMap
	//	*Type_TypeName
	//	*Type_TypeNamed
	//	*Type_TypeNil
	//	*Type_TypePackage
	//	*Type_TypePointer
	//	*Type_TypeSignature
	//	*Type_TypeSlice
	//	*Type_TypeStruct
	//	*Type_TypeTuple
	//	*Type_TypeVar
	Type                 isType_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Type) Reset()         { *m = Type{} }
func (m *Type) String() string { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()    {}
func (*Type) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{2}
}
func (m *Type) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Type.Unmarshal(m, b)
}
func (m *Type) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Type.Marshal(b, m, deterministic)
}
func (dst *Type) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Type.Merge(dst, src)
}
func (m *Type) XXX_Size() int {
	return xxx_messageInfo_Type.Size(m)
}
func (m *Type) XXX_DiscardUnknown() {
	xxx_messageInfo_Type.DiscardUnknown(m)
}

var xxx_messageInfo_Type proto.InternalMessageInfo

type isType_Type interface {
	isType_Type()
}

type Type_TypeArray struct {
	TypeArray *TypeArray `protobuf:"bytes,3,opt,name=type_array,json=typeArray,oneof"`
}
type Type_TypeBasic struct {
	TypeBasic *TypeBasic `protobuf:"bytes,4,opt,name=type_basic,json=typeBasic,oneof"`
}
type Type_TypeBuiltin struct {
	TypeBuiltin bool `protobuf:"varint,5,opt,name=type_builtin,json=typeBuiltin,oneof"`
}
type Type_TypeChan struct {
	TypeChan *TypeChan `protobuf:"bytes,6,opt,name=type_chan,json=typeChan,oneof"`
}
type Type_TypeConst struct {
	TypeConst *TypeConst `protobuf:"bytes,7,opt,name=type_const,json=typeConst,oneof"`
}
type Type_TypeFunc struct {
	TypeFunc *TypeSignature `protobuf:"bytes,8,opt,name=type_func,json=typeFunc,oneof"`
}
type Type_TypeInterface struct {
	TypeInterface *TypeInterface `protobuf:"bytes,9,opt,name=type_interface,json=typeInterface,oneof"`
}
type Type_TypeLabel struct {
	TypeLabel *TypeRef `protobuf:"bytes,10,opt,name=type_label,json=typeLabel,oneof"`
}
type Type_TypeMap struct {
	TypeMap *TypeMap `protobuf:"bytes,11,opt,name=type_map,json=typeMap,oneof"`
}
type Type_TypeName struct {
	TypeName *TypeRef `protobuf:"bytes,12,opt,name=type_name,json=typeName,oneof"`
}
type Type_TypeNamed struct {
	TypeNamed *TypeNamed `protobuf:"bytes,13,opt,name=type_named,json=typeNamed,oneof"`
}
type Type_TypeNil struct {
	TypeNil *TypeRef `protobuf:"bytes,14,opt,name=type_nil,json=typeNil,oneof"`
}
type Type_TypePackage struct {
	TypePackage bool `protobuf:"varint,15,opt,name=type_package,json=typePackage,oneof"`
}
type Type_TypePointer struct {
	TypePointer *TypePointer `protobuf:"bytes,16,opt,name=type_pointer,json=typePointer,oneof"`
}
type Type_TypeSignature struct {
	TypeSignature *TypeSignature `protobuf:"bytes,17,opt,name=type_signature,json=typeSignature,oneof"`
}
type Type_TypeSlice struct {
	TypeSlice *TypeSlice `protobuf:"bytes,18,opt,name=type_slice,json=typeSlice,oneof"`
}
type Type_TypeStruct struct {
	TypeStruct *TypeStruct `protobuf:"bytes,19,opt,name=type_struct,json=typeStruct,oneof"`
}
type Type_TypeTuple struct {
	TypeTuple *TypeTuple `protobuf:"bytes,20,opt,name=type_tuple,json=typeTuple,oneof"`
}
type Type_TypeVar struct {
	TypeVar *TypeRef `protobuf:"bytes,21,opt,name=type_var,json=typeVar,oneof"`
}

func (*Type_TypeArray) isType_Type()     {}
func (*Type_TypeBasic) isType_Type()     {}
func (*Type_TypeBuiltin) isType_Type()   {}
func (*Type_TypeChan) isType_Type()      {}
func (*Type_TypeConst) isType_Type()     {}
func (*Type_TypeFunc) isType_Type()      {}
func (*Type_TypeInterface) isType_Type() {}
func (*Type_TypeLabel) isType_Type()     {}
func (*Type_TypeMap) isType_Type()       {}
func (*Type_TypeName) isType_Type()      {}
func (*Type_TypeNamed) isType_Type()     {}
func (*Type_TypeNil) isType_Type()       {}
func (*Type_TypePackage) isType_Type()   {}
func (*Type_TypePointer) isType_Type()   {}
func (*Type_TypeSignature) isType_Type() {}
func (*Type_TypeSlice) isType_Type()     {}
func (*Type_TypeStruct) isType_Type()    {}
func (*Type_TypeTuple) isType_Type()     {}
func (*Type_TypeVar) isType_Type()       {}

func (m *Type) GetType() isType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Type) GetPackage() string {
	if m != nil {
		return m.Package
	}
	return ""
}

func (m *Type) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Type) GetTypeArray() *TypeArray {
	if x, ok := m.GetType().(*Type_TypeArray); ok {
		return x.TypeArray
	}
	return nil
}

func (m *Type) GetTypeBasic() *TypeBasic {
	if x, ok := m.GetType().(*Type_TypeBasic); ok {
		return x.TypeBasic
	}
	return nil
}

func (m *Type) GetTypeBuiltin() bool {
	if x, ok := m.GetType().(*Type_TypeBuiltin); ok {
		return x.TypeBuiltin
	}
	return false
}

func (m *Type) GetTypeChan() *TypeChan {
	if x, ok := m.GetType().(*Type_TypeChan); ok {
		return x.TypeChan
	}
	return nil
}

func (m *Type) GetTypeConst() *TypeConst {
	if x, ok := m.GetType().(*Type_TypeConst); ok {
		return x.TypeConst
	}
	return nil
}

func (m *Type) GetTypeFunc() *TypeSignature {
	if x, ok := m.GetType().(*Type_TypeFunc); ok {
		return x.TypeFunc
	}
	return nil
}

func (m *Type) GetTypeInterface() *TypeInterface {
	if x, ok := m.GetType().(*Type_TypeInterface); ok {
		return x.TypeInterface
	}
	return nil
}

func (m *Type) GetTypeLabel() *TypeRef {
	if x, ok := m.GetType().(*Type_TypeLabel); ok {
		return x.TypeLabel
	}
	return nil
}

func (m *Type) GetTypeMap() *TypeMap {
	if x, ok := m.GetType().(*Type_TypeMap); ok {
		return x.TypeMap
	}
	return nil
}

func (m *Type) GetTypeName() *TypeRef {
	if x, ok := m.GetType().(*Type_TypeName); ok {
		return x.TypeName
	}
	return nil
}

func (m *Type) GetTypeNamed() *TypeNamed {
	if x, ok := m.GetType().(*Type_TypeNamed); ok {
		return x.TypeNamed
	}
	return nil
}

func (m *Type) GetTypeNil() *TypeRef {
	if x, ok := m.GetType().(*Type_TypeNil); ok {
		return x.TypeNil
	}
	return nil
}

func (m *Type) GetTypePackage() bool {
	if x, ok := m.GetType().(*Type_TypePackage); ok {
		return x.TypePackage
	}
	return false
}

func (m *Type) GetTypePointer() *TypePointer {
	if x, ok := m.GetType().(*Type_TypePointer); ok {
		return x.TypePointer
	}
	return nil
}

func (m *Type) GetTypeSignature() *TypeSignature {
	if x, ok := m.GetType().(*Type_TypeSignature); ok {
		return x.TypeSignature
	}
	return nil
}

func (m *Type) GetTypeSlice() *TypeSlice {
	if x, ok := m.GetType().(*Type_TypeSlice); ok {
		return x.TypeSlice
	}
	return nil
}

func (m *Type) GetTypeStruct() *TypeStruct {
	if x, ok := m.GetType().(*Type_TypeStruct); ok {
		return x.TypeStruct
	}
	return nil
}

func (m *Type) GetTypeTuple() *TypeTuple {
	if x, ok := m.GetType().(*Type_TypeTuple); ok {
		return x.TypeTuple
	}
	return nil
}

func (m *Type) GetTypeVar() *TypeRef {
	if x, ok := m.GetType().(*Type_TypeVar); ok {
		return x.TypeVar
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Type) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Type_OneofMarshaler, _Type_OneofUnmarshaler, _Type_OneofSizer, []interface{}{
		(*Type_TypeArray)(nil),
		(*Type_TypeBasic)(nil),
		(*Type_TypeBuiltin)(nil),
		(*Type_TypeChan)(nil),
		(*Type_TypeConst)(nil),
		(*Type_TypeFunc)(nil),
		(*Type_TypeInterface)(nil),
		(*Type_TypeLabel)(nil),
		(*Type_TypeMap)(nil),
		(*Type_TypeName)(nil),
		(*Type_TypeNamed)(nil),
		(*Type_TypeNil)(nil),
		(*Type_TypePackage)(nil),
		(*Type_TypePointer)(nil),
		(*Type_TypeSignature)(nil),
		(*Type_TypeSlice)(nil),
		(*Type_TypeStruct)(nil),
		(*Type_TypeTuple)(nil),
		(*Type_TypeVar)(nil),
	}
}

func _Type_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Type)
	// type
	switch x := m.Type.(type) {
	case *Type_TypeArray:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeArray); err != nil {
			return err
		}
	case *Type_TypeBasic:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeBasic); err != nil {
			return err
		}
	case *Type_TypeBuiltin:
		t := uint64(0)
		if x.TypeBuiltin {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Type_TypeChan:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeChan); err != nil {
			return err
		}
	case *Type_TypeConst:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeConst); err != nil {
			return err
		}
	case *Type_TypeFunc:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeFunc); err != nil {
			return err
		}
	case *Type_TypeInterface:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeInterface); err != nil {
			return err
		}
	case *Type_TypeLabel:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeLabel); err != nil {
			return err
		}
	case *Type_TypeMap:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeMap); err != nil {
			return err
		}
	case *Type_TypeName:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeName); err != nil {
			return err
		}
	case *Type_TypeNamed:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeNamed); err != nil {
			return err
		}
	case *Type_TypeNil:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeNil); err != nil {
			return err
		}
	case *Type_TypePackage:
		t := uint64(0)
		if x.TypePackage {
			t = 1
		}
		b.EncodeVarint(15<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *Type_TypePointer:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypePointer); err != nil {
			return err
		}
	case *Type_TypeSignature:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeSignature); err != nil {
			return err
		}
	case *Type_TypeSlice:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeSlice); err != nil {
			return err
		}
	case *Type_TypeStruct:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeStruct); err != nil {
			return err
		}
	case *Type_TypeTuple:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeTuple); err != nil {
			return err
		}
	case *Type_TypeVar:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TypeVar); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Type.Type has unexpected type %T", x)
	}
	return nil
}

func _Type_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Type)
	switch tag {
	case 3: // type.type_array
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeArray)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeArray{msg}
		return true, err
	case 4: // type.type_basic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeBasic)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeBasic{msg}
		return true, err
	case 5: // type.type_builtin
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &Type_TypeBuiltin{x != 0}
		return true, err
	case 6: // type.type_chan
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeChan)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeChan{msg}
		return true, err
	case 7: // type.type_const
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeConst)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeConst{msg}
		return true, err
	case 8: // type.type_func
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeSignature)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeFunc{msg}
		return true, err
	case 9: // type.type_interface
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeInterface)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeInterface{msg}
		return true, err
	case 10: // type.type_label
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeRef)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeLabel{msg}
		return true, err
	case 11: // type.type_map
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeMap)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeMap{msg}
		return true, err
	case 12: // type.type_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeRef)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeName{msg}
		return true, err
	case 13: // type.type_named
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeNamed)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeNamed{msg}
		return true, err
	case 14: // type.type_nil
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeRef)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeNil{msg}
		return true, err
	case 15: // type.type_package
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &Type_TypePackage{x != 0}
		return true, err
	case 16: // type.type_pointer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypePointer)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypePointer{msg}
		return true, err
	case 17: // type.type_signature
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeSignature)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeSignature{msg}
		return true, err
	case 18: // type.type_slice
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeSlice)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeSlice{msg}
		return true, err
	case 19: // type.type_struct
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeStruct)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeStruct{msg}
		return true, err
	case 20: // type.type_tuple
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeTuple)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeTuple{msg}
		return true, err
	case 21: // type.type_var
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypeRef)
		err := b.DecodeMessage(msg)
		m.Type = &Type_TypeVar{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Type_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Type)
	// type
	switch x := m.Type.(type) {
	case *Type_TypeArray:
		s := proto.Size(x.TypeArray)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeBasic:
		s := proto.Size(x.TypeBasic)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeBuiltin:
		n += 1 // tag and wire
		n += 1
	case *Type_TypeChan:
		s := proto.Size(x.TypeChan)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeConst:
		s := proto.Size(x.TypeConst)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeFunc:
		s := proto.Size(x.TypeFunc)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeInterface:
		s := proto.Size(x.TypeInterface)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeLabel:
		s := proto.Size(x.TypeLabel)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeMap:
		s := proto.Size(x.TypeMap)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeName:
		s := proto.Size(x.TypeName)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeNamed:
		s := proto.Size(x.TypeNamed)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeNil:
		s := proto.Size(x.TypeNil)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypePackage:
		n += 1 // tag and wire
		n += 1
	case *Type_TypePointer:
		s := proto.Size(x.TypePointer)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeSignature:
		s := proto.Size(x.TypeSignature)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeSlice:
		s := proto.Size(x.TypeSlice)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeStruct:
		s := proto.Size(x.TypeStruct)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeTuple:
		s := proto.Size(x.TypeTuple)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Type_TypeVar:
		s := proto.Size(x.TypeVar)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TypeArray struct {
	Elem                 *TypeRef `protobuf:"bytes,1,opt,name=elem" json:"elem,omitempty"`
	Len                  int64    `protobuf:"varint,2,opt,name=len" json:"len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypeArray) Reset()         { *m = TypeArray{} }
func (m *TypeArray) String() string { return proto.CompactTextString(m) }
func (*TypeArray) ProtoMessage()    {}
func (*TypeArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{3}
}
func (m *TypeArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeArray.Unmarshal(m, b)
}
func (m *TypeArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeArray.Marshal(b, m, deterministic)
}
func (dst *TypeArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeArray.Merge(dst, src)
}
func (m *TypeArray) XXX_Size() int {
	return xxx_messageInfo_TypeArray.Size(m)
}
func (m *TypeArray) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeArray.DiscardUnknown(m)
}

var xxx_messageInfo_TypeArray proto.InternalMessageInfo

func (m *TypeArray) GetElem() *TypeRef {
	if m != nil {
		return m.Elem
	}
	return nil
}

func (m *TypeArray) GetLen() int64 {
	if m != nil {
		return m.Len
	}
	return 0
}

type TypeBasic struct {
	Flags                int32          `protobuf:"varint,1,opt,name=flags" json:"flags,omitempty"`
	Kind                 TypeBasic_Kind `protobuf:"varint,2,opt,name=kind,enum=pb.TypeBasic_Kind" json:"kind,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TypeBasic) Reset()         { *m = TypeBasic{} }
func (m *TypeBasic) String() string { return proto.CompactTextString(m) }
func (*TypeBasic) ProtoMessage()    {}
func (*TypeBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{4}
}
func (m *TypeBasic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeBasic.Unmarshal(m, b)
}
func (m *TypeBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeBasic.Marshal(b, m, deterministic)
}
func (dst *TypeBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeBasic.Merge(dst, src)
}
func (m *TypeBasic) XXX_Size() int {
	return xxx_messageInfo_TypeBasic.Size(m)
}
func (m *TypeBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeBasic.DiscardUnknown(m)
}

var xxx_messageInfo_TypeBasic proto.InternalMessageInfo

func (m *TypeBasic) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *TypeBasic) GetKind() TypeBasic_Kind {
	if m != nil {
		return m.Kind
	}
	return TypeBasic_INVALID
}

type TypeChan struct {
	Elem                 *TypeRef `protobuf:"bytes,1,opt,name=elem" json:"elem,omitempty"`
	SendDir              bool     `protobuf:"varint,2,opt,name=send_dir,json=sendDir" json:"send_dir,omitempty"`
	RecvDir              bool     `protobuf:"varint,3,opt,name=recv_dir,json=recvDir" json:"recv_dir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypeChan) Reset()         { *m = TypeChan{} }
func (m *TypeChan) String() string { return proto.CompactTextString(m) }
func (*TypeChan) ProtoMessage()    {}
func (*TypeChan) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{5}
}
func (m *TypeChan) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeChan.Unmarshal(m, b)
}
func (m *TypeChan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeChan.Marshal(b, m, deterministic)
}
func (dst *TypeChan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeChan.Merge(dst, src)
}
func (m *TypeChan) XXX_Size() int {
	return xxx_messageInfo_TypeChan.Size(m)
}
func (m *TypeChan) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeChan.DiscardUnknown(m)
}

var xxx_messageInfo_TypeChan proto.InternalMessageInfo

func (m *TypeChan) GetElem() *TypeRef {
	if m != nil {
		return m.Elem
	}
	return nil
}

func (m *TypeChan) GetSendDir() bool {
	if m != nil {
		return m.SendDir
	}
	return false
}

func (m *TypeChan) GetRecvDir() bool {
	if m != nil {
		return m.RecvDir
	}
	return false
}

type TypeConst struct {
	Type                 *TypeRef       `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Value                *ConstantValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TypeConst) Reset()         { *m = TypeConst{} }
func (m *TypeConst) String() string { return proto.CompactTextString(m) }
func (*TypeConst) ProtoMessage()    {}
func (*TypeConst) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{6}
}
func (m *TypeConst) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeConst.Unmarshal(m, b)
}
func (m *TypeConst) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeConst.Marshal(b, m, deterministic)
}
func (dst *TypeConst) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeConst.Merge(dst, src)
}
func (m *TypeConst) XXX_Size() int {
	return xxx_messageInfo_TypeConst.Size(m)
}
func (m *TypeConst) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeConst.DiscardUnknown(m)
}

var xxx_messageInfo_TypeConst proto.InternalMessageInfo

func (m *TypeConst) GetType() *TypeRef {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TypeConst) GetValue() *ConstantValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type TypeInterface struct {
	ExplicitMethods      []*TypeRef `protobuf:"bytes,1,rep,name=explicit_methods,json=explicitMethods" json:"explicit_methods,omitempty"`
	Embedded             []*TypeRef `protobuf:"bytes,2,rep,name=embedded" json:"embedded,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TypeInterface) Reset()         { *m = TypeInterface{} }
func (m *TypeInterface) String() string { return proto.CompactTextString(m) }
func (*TypeInterface) ProtoMessage()    {}
func (*TypeInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{7}
}
func (m *TypeInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeInterface.Unmarshal(m, b)
}
func (m *TypeInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeInterface.Marshal(b, m, deterministic)
}
func (dst *TypeInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeInterface.Merge(dst, src)
}
func (m *TypeInterface) XXX_Size() int {
	return xxx_messageInfo_TypeInterface.Size(m)
}
func (m *TypeInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeInterface.DiscardUnknown(m)
}

var xxx_messageInfo_TypeInterface proto.InternalMessageInfo

func (m *TypeInterface) GetExplicitMethods() []*TypeRef {
	if m != nil {
		return m.ExplicitMethods
	}
	return nil
}

func (m *TypeInterface) GetEmbedded() []*TypeRef {
	if m != nil {
		return m.Embedded
	}
	return nil
}

type TypeMap struct {
	Elem                 *TypeRef `protobuf:"bytes,1,opt,name=elem" json:"elem,omitempty"`
	Key                  *TypeRef `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypeMap) Reset()         { *m = TypeMap{} }
func (m *TypeMap) String() string { return proto.CompactTextString(m) }
func (*TypeMap) ProtoMessage()    {}
func (*TypeMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{8}
}
func (m *TypeMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeMap.Unmarshal(m, b)
}
func (m *TypeMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeMap.Marshal(b, m, deterministic)
}
func (dst *TypeMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeMap.Merge(dst, src)
}
func (m *TypeMap) XXX_Size() int {
	return xxx_messageInfo_TypeMap.Size(m)
}
func (m *TypeMap) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeMap.DiscardUnknown(m)
}

var xxx_messageInfo_TypeMap proto.InternalMessageInfo

func (m *TypeMap) GetElem() *TypeRef {
	if m != nil {
		return m.Elem
	}
	return nil
}

func (m *TypeMap) GetKey() *TypeRef {
	if m != nil {
		return m.Key
	}
	return nil
}

type TypeNamed struct {
	TypeName             *TypeRef   `protobuf:"bytes,1,opt,name=type_name,json=typeName" json:"type_name,omitempty"`
	Type                 *TypeRef   `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Methods              []*TypeRef `protobuf:"bytes,3,rep,name=methods" json:"methods,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TypeNamed) Reset()         { *m = TypeNamed{} }
func (m *TypeNamed) String() string { return proto.CompactTextString(m) }
func (*TypeNamed) ProtoMessage()    {}
func (*TypeNamed) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{9}
}
func (m *TypeNamed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeNamed.Unmarshal(m, b)
}
func (m *TypeNamed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeNamed.Marshal(b, m, deterministic)
}
func (dst *TypeNamed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeNamed.Merge(dst, src)
}
func (m *TypeNamed) XXX_Size() int {
	return xxx_messageInfo_TypeNamed.Size(m)
}
func (m *TypeNamed) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeNamed.DiscardUnknown(m)
}

var xxx_messageInfo_TypeNamed proto.InternalMessageInfo

func (m *TypeNamed) GetTypeName() *TypeRef {
	if m != nil {
		return m.TypeName
	}
	return nil
}

func (m *TypeNamed) GetType() *TypeRef {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TypeNamed) GetMethods() []*TypeRef {
	if m != nil {
		return m.Methods
	}
	return nil
}

type TypePointer struct {
	Elem                 *TypeRef `protobuf:"bytes,1,opt,name=elem" json:"elem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypePointer) Reset()         { *m = TypePointer{} }
func (m *TypePointer) String() string { return proto.CompactTextString(m) }
func (*TypePointer) ProtoMessage()    {}
func (*TypePointer) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{10}
}
func (m *TypePointer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypePointer.Unmarshal(m, b)
}
func (m *TypePointer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypePointer.Marshal(b, m, deterministic)
}
func (dst *TypePointer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypePointer.Merge(dst, src)
}
func (m *TypePointer) XXX_Size() int {
	return xxx_messageInfo_TypePointer.Size(m)
}
func (m *TypePointer) XXX_DiscardUnknown() {
	xxx_messageInfo_TypePointer.DiscardUnknown(m)
}

var xxx_messageInfo_TypePointer proto.InternalMessageInfo

func (m *TypePointer) GetElem() *TypeRef {
	if m != nil {
		return m.Elem
	}
	return nil
}

type TypeSignature struct {
	Recv                 *TypeRef   `protobuf:"bytes,1,opt,name=recv" json:"recv,omitempty"`
	Params               []*TypeRef `protobuf:"bytes,2,rep,name=params" json:"params,omitempty"`
	Results              []*TypeRef `protobuf:"bytes,3,rep,name=results" json:"results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TypeSignature) Reset()         { *m = TypeSignature{} }
func (m *TypeSignature) String() string { return proto.CompactTextString(m) }
func (*TypeSignature) ProtoMessage()    {}
func (*TypeSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{11}
}
func (m *TypeSignature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeSignature.Unmarshal(m, b)
}
func (m *TypeSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeSignature.Marshal(b, m, deterministic)
}
func (dst *TypeSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeSignature.Merge(dst, src)
}
func (m *TypeSignature) XXX_Size() int {
	return xxx_messageInfo_TypeSignature.Size(m)
}
func (m *TypeSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeSignature.DiscardUnknown(m)
}

var xxx_messageInfo_TypeSignature proto.InternalMessageInfo

func (m *TypeSignature) GetRecv() *TypeRef {
	if m != nil {
		return m.Recv
	}
	return nil
}

func (m *TypeSignature) GetParams() []*TypeRef {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *TypeSignature) GetResults() []*TypeRef {
	if m != nil {
		return m.Results
	}
	return nil
}

type TypeSlice struct {
	Elem                 *TypeRef `protobuf:"bytes,1,opt,name=elem" json:"elem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypeSlice) Reset()         { *m = TypeSlice{} }
func (m *TypeSlice) String() string { return proto.CompactTextString(m) }
func (*TypeSlice) ProtoMessage()    {}
func (*TypeSlice) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{12}
}
func (m *TypeSlice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeSlice.Unmarshal(m, b)
}
func (m *TypeSlice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeSlice.Marshal(b, m, deterministic)
}
func (dst *TypeSlice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeSlice.Merge(dst, src)
}
func (m *TypeSlice) XXX_Size() int {
	return xxx_messageInfo_TypeSlice.Size(m)
}
func (m *TypeSlice) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeSlice.DiscardUnknown(m)
}

var xxx_messageInfo_TypeSlice proto.InternalMessageInfo

func (m *TypeSlice) GetElem() *TypeRef {
	if m != nil {
		return m.Elem
	}
	return nil
}

type TypeStruct struct {
	Fields               []*TypeRef `protobuf:"bytes,1,rep,name=fields" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TypeStruct) Reset()         { *m = TypeStruct{} }
func (m *TypeStruct) String() string { return proto.CompactTextString(m) }
func (*TypeStruct) ProtoMessage()    {}
func (*TypeStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{13}
}
func (m *TypeStruct) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeStruct.Unmarshal(m, b)
}
func (m *TypeStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeStruct.Marshal(b, m, deterministic)
}
func (dst *TypeStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeStruct.Merge(dst, src)
}
func (m *TypeStruct) XXX_Size() int {
	return xxx_messageInfo_TypeStruct.Size(m)
}
func (m *TypeStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeStruct.DiscardUnknown(m)
}

var xxx_messageInfo_TypeStruct proto.InternalMessageInfo

func (m *TypeStruct) GetFields() []*TypeRef {
	if m != nil {
		return m.Fields
	}
	return nil
}

type TypeTuple struct {
	Vars                 []*TypeRef `protobuf:"bytes,1,rep,name=vars" json:"vars,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TypeTuple) Reset()         { *m = TypeTuple{} }
func (m *TypeTuple) String() string { return proto.CompactTextString(m) }
func (*TypeTuple) ProtoMessage()    {}
func (*TypeTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_9840b0e3b8798b78, []int{14}
}
func (m *TypeTuple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypeTuple.Unmarshal(m, b)
}
func (m *TypeTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypeTuple.Marshal(b, m, deterministic)
}
func (dst *TypeTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypeTuple.Merge(dst, src)
}
func (m *TypeTuple) XXX_Size() int {
	return xxx_messageInfo_TypeTuple.Size(m)
}
func (m *TypeTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_TypeTuple.DiscardUnknown(m)
}

var xxx_messageInfo_TypeTuple proto.InternalMessageInfo

func (m *TypeTuple) GetVars() []*TypeRef {
	if m != nil {
		return m.Vars
	}
	return nil
}

func init() {
	proto.RegisterType((*ConstantValue)(nil), "pb.ConstantValue")
	proto.RegisterType((*TypeRef)(nil), "pb.TypeRef")
	proto.RegisterType((*Type)(nil), "pb.Type")
	proto.RegisterType((*TypeArray)(nil), "pb.TypeArray")
	proto.RegisterType((*TypeBasic)(nil), "pb.TypeBasic")
	proto.RegisterType((*TypeChan)(nil), "pb.TypeChan")
	proto.RegisterType((*TypeConst)(nil), "pb.TypeConst")
	proto.RegisterType((*TypeInterface)(nil), "pb.TypeInterface")
	proto.RegisterType((*TypeMap)(nil), "pb.TypeMap")
	proto.RegisterType((*TypeNamed)(nil), "pb.TypeNamed")
	proto.RegisterType((*TypePointer)(nil), "pb.TypePointer")
	proto.RegisterType((*TypeSignature)(nil), "pb.TypeSignature")
	proto.RegisterType((*TypeSlice)(nil), "pb.TypeSlice")
	proto.RegisterType((*TypeStruct)(nil), "pb.TypeStruct")
	proto.RegisterType((*TypeTuple)(nil), "pb.TypeTuple")
	proto.RegisterEnum("pb.TypeBasic_Kind", TypeBasic_Kind_name, TypeBasic_Kind_value)
}

func init() { proto.RegisterFile("type.proto", fileDescriptor_type_9840b0e3b8798b78) }

var fileDescriptor_type_9840b0e3b8798b78 = []byte{
	// 1089 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xed, 0x6e, 0xe2, 0x46,
	0x17, 0x06, 0x6c, 0x30, 0x1c, 0xbe, 0x26, 0xb3, 0xd9, 0x7d, 0x27, 0xaf, 0x54, 0x25, 0xf2, 0xaa,
	0xdd, 0xa8, 0x5d, 0xa1, 0x86, 0x44, 0xd1, 0xaa, 0x3f, 0x2a, 0xe5, 0xb3, 0xa0, 0x12, 0x07, 0x4d,
	0x20, 0x6a, 0x7f, 0xa1, 0xc1, 0x1e, 0x12, 0x2b, 0xc6, 0x58, 0xc6, 0xa4, 0x1b, 0xa9, 0xbd, 0xa3,
	0x5e, 0x43, 0x6f, 0xa0, 0x17, 0xd5, 0x6a, 0x66, 0x3c, 0x0e, 0xee, 0x12, 0xe5, 0xdf, 0x3c, 0xe7,
	0xf3, 0x39, 0x67, 0xce, 0x1c, 0x1b, 0x20, 0x79, 0x8a, 0x78, 0x27, 0x8a, 0x17, 0xc9, 0x02, 0x97,
	0xa2, 0xa9, 0xfd, 0x67, 0x11, 0x9a, 0x67, 0x8b, 0x70, 0x99, 0xb0, 0x30, 0xb9, 0x65, 0xc1, 0x8a,
	0xe3, 0xff, 0x83, 0xb5, 0x0a, 0x1f, 0xc2, 0xc5, 0x6f, 0x21, 0x29, 0xee, 0x15, 0xf7, 0x6b, 0xbd,
	0x02, 0xd5, 0x02, 0xbc, 0x0d, 0xe6, 0x74, 0xb1, 0x08, 0x48, 0x69, 0xaf, 0xb8, 0x5f, 0xed, 0x15,
	0xa8, 0x44, 0x98, 0x40, 0x65, 0x99, 0xc4, 0x7e, 0x78, 0x47, 0x8c, 0xd4, 0x21, 0xc5, 0x18, 0x83,
	0xe1, 0x87, 0x09, 0x31, 0x53, 0xb1, 0x00, 0xf8, 0x1d, 0x94, 0x67, 0xc1, 0x82, 0x25, 0xa4, 0xbc,
	0x57, 0xdc, 0x2f, 0xf6, 0x0a, 0x54, 0x41, 0x91, 0xd7, 0x5d, 0xcc, 0xa3, 0x80, 0x7f, 0x26, 0x15,
	0x9d, 0x37, 0x15, 0x9c, 0x5a, 0x50, 0x7e, 0x14, 0xe4, 0xec, 0x1d, 0xb0, 0x46, 0x4f, 0x11, 0xa7,
	0x7c, 0x86, 0x5b, 0x50, 0xf2, 0x3d, 0x49, 0xb1, 0x49, 0x4b, 0xbe, 0x67, 0xff, 0x65, 0x81, 0x29,
	0x74, 0x98, 0x80, 0x15, 0x31, 0xf7, 0x81, 0xdd, 0x71, 0x55, 0x00, 0xd5, 0x10, 0x63, 0x30, 0x43,
	0x36, 0xe7, 0x92, 0x7e, 0x8d, 0xca, 0x33, 0xee, 0xa8, 0x96, 0x4c, 0x58, 0x1c, 0xb3, 0x27, 0x59,
	0x40, 0xbd, 0xdb, 0xec, 0x44, 0xd3, 0x8e, 0x88, 0x75, 0x22, 0x84, 0xbd, 0x02, 0xad, 0x25, 0x1a,
	0x64, 0xf6, 0x53, 0xb6, 0xf4, 0x5d, 0x59, 0xd9, 0x9a, 0xfd, 0xa9, 0x10, 0x6a, 0x7b, 0x09, 0xf0,
	0x7b, 0x68, 0x28, 0xfb, 0x95, 0x1f, 0x24, 0x7e, 0x28, 0xab, 0x16, 0xad, 0xab, 0x4b, 0x13, 0x25,
	0xc4, 0xdf, 0x81, 0xf4, 0x98, 0xb8, 0xf7, 0x2c, 0x94, 0xd5, 0xd7, 0xbb, 0x0d, 0x1d, 0xf3, 0xec,
	0x9e, 0x85, 0xbd, 0x02, 0xad, 0x26, 0xe9, 0x39, 0x63, 0xe0, 0x8a, 0x6b, 0x23, 0x56, 0x9e, 0x81,
	0xbc, 0x4b, 0xcd, 0x40, 0x02, 0xfc, 0x7d, 0x1a, 0x7c, 0xb6, 0x0a, 0x5d, 0x52, 0x95, 0xe6, 0x5b,
	0xda, 0xfc, 0xc6, 0xbf, 0x0b, 0x59, 0xb2, 0x8a, 0xb9, 0xce, 0x70, 0xb9, 0x0a, 0x5d, 0xfc, 0x03,
	0xb4, 0xa4, 0x87, 0x1f, 0x26, 0x3c, 0x9e, 0x31, 0x97, 0x93, 0x5a, 0xde, 0xad, 0xaf, 0x15, 0xbd,
	0x02, 0x6d, 0x26, 0xeb, 0x02, 0xfc, 0x31, 0x65, 0x17, 0xb0, 0x29, 0x0f, 0x08, 0x48, 0xbf, 0xba,
	0xf6, 0xa3, 0x7c, 0xa6, 0xb9, 0x0d, 0x84, 0x1e, 0xef, 0x83, 0xcc, 0x3a, 0x99, 0xb3, 0x88, 0xd4,
	0xf3, 0xb6, 0x57, 0x2c, 0x12, 0x23, 0x90, 0xa8, 0x23, 0xfe, 0x36, 0xad, 0x42, 0x5e, 0x60, 0x63,
	0x53, 0x58, 0x19, 0xc9, 0x59, 0xbf, 0x53, 0x61, 0xeb, 0x91, 0x66, 0xbe, 0x43, 0xc2, 0xc2, 0xd3,
	0x2c, 0x24, 0xc8, 0x58, 0x84, 0x7e, 0x40, 0x5a, 0x9b, 0x42, 0x4b, 0x16, 0x8e, 0x1f, 0x64, 0xb7,
	0xa9, 0x07, 0xac, 0xbd, 0x7e, 0x9b, 0xc3, 0x74, 0xcc, 0x8e, 0xb4, 0xd1, 0x42, 0x36, 0x90, 0x20,
	0x19, 0xb2, 0xad, 0x43, 0x0e, 0x95, 0x38, 0xf3, 0x52, 0x30, 0x6b, 0xfa, 0x52, 0x5f, 0x09, 0xd9,
	0x7a, 0xf9, 0xae, 0x64, 0xd3, 0x33, 0x41, 0x56, 0xf0, 0x32, 0xf0, 0x5d, 0x4e, 0x70, 0xbe, 0xe0,
	0x1b, 0x21, 0xd4, 0x05, 0x4b, 0x80, 0x0f, 0xa0, 0xae, 0xec, 0x93, 0x78, 0xe5, 0x26, 0xe4, 0x8d,
	0x74, 0x68, 0x65, 0x0e, 0x52, 0xda, 0x2b, 0x50, 0x19, 0x54, 0xa1, 0x2c, 0x45, 0xb2, 0x8a, 0x02,
	0x4e, 0xb6, 0xf3, 0x29, 0x46, 0x42, 0xa8, 0x53, 0x48, 0x90, 0xf5, 0xf4, 0x91, 0xc5, 0xe4, 0xed,
	0x8b, 0x3d, 0xbd, 0x65, 0xf1, 0x69, 0x05, 0x4c, 0x71, 0xb4, 0x7f, 0x84, 0x5a, 0xf6, 0xe6, 0xf0,
	0x2e, 0x98, 0x3c, 0xe0, 0x73, 0xf9, 0x82, 0xf3, 0xae, 0x54, 0x2a, 0x30, 0x02, 0x23, 0xe0, 0xa1,
	0x7c, 0xca, 0x06, 0x15, 0x47, 0xfb, 0x6f, 0x43, 0x05, 0x50, 0xef, 0x6e, 0x5b, 0xac, 0x19, 0x76,
	0xb7, 0x94, 0x11, 0xca, 0x54, 0x01, 0xfc, 0x0d, 0x98, 0x0f, 0x7e, 0xe8, 0x49, 0xb7, 0x56, 0x17,
	0xe7, 0xde, 0x6d, 0xe7, 0x67, 0x3f, 0xf4, 0xa8, 0xd4, 0xdb, 0xff, 0x94, 0xc0, 0x14, 0x10, 0xd7,
	0xc1, 0xea, 0x3b, 0xb7, 0x27, 0x83, 0xfe, 0x39, 0x2a, 0xe0, 0x2a, 0x98, 0xa7, 0xd7, 0xd7, 0x03,
	0x54, 0xc4, 0x16, 0x18, 0x7d, 0x67, 0x84, 0x4a, 0xb8, 0x06, 0xe5, 0xbe, 0x33, 0x9a, 0x7c, 0x42,
	0x06, 0x06, 0xa8, 0x88, 0xe3, 0xc1, 0x31, 0x32, 0xf5, 0xf9, 0xb0, 0x8b, 0xca, 0xfa, 0x7c, 0x7c,
	0x84, 0x2a, 0x22, 0xc2, 0x58, 0x38, 0x5a, 0x42, 0x3a, 0x56, 0x9e, 0x55, 0x91, 0x64, 0x9c, 0xba,
	0xd6, 0x32, 0x70, 0xd8, 0x45, 0x90, 0x81, 0xe3, 0x23, 0x54, 0xc7, 0x0d, 0xa8, 0x4a, 0x30, 0x1c,
	0x51, 0xd4, 0x10, 0xe8, 0x72, 0x70, 0x7d, 0x22, 0x0d, 0x9b, 0xcf, 0xe8, 0xf8, 0x08, 0xb5, 0x70,
	0x0b, 0xe0, 0xec, 0xfa, 0x6a, 0x38, 0xb8, 0xf8, 0x45, 0xe0, 0x36, 0x6e, 0x43, 0x5d, 0xe3, 0x83,
	0xee, 0x27, 0x84, 0x44, 0xf6, 0x9b, 0x11, 0xed, 0x3b, 0x3f, 0xa1, 0x2d, 0x8c, 0xa1, 0x35, 0x76,
	0x6e, 0x4e, 0x2e, 0x2f, 0x26, 0xc3, 0xeb, 0xbe, 0x33, 0xba, 0xa0, 0x08, 0x63, 0x04, 0x8d, 0xb1,
	0x33, 0xfa, 0x75, 0x78, 0x71, 0x3e, 0x91, 0x15, 0xbf, 0x11, 0x21, 0xb4, 0x44, 0x14, 0xb0, 0xbd,
	0x6e, 0x42, 0xc7, 0xce, 0x05, 0x7a, 0x8b, 0xb7, 0xa0, 0xa9, 0x25, 0x92, 0x0b, 0x7a, 0x87, 0xdf,
	0x40, 0x5b, 0x8b, 0x52, 0x02, 0xe8, 0x7f, 0x2a, 0xa1, 0x12, 0xa6, 0x24, 0xc8, 0x7a, 0x78, 0xa7,
	0x3f, 0x40, 0x3b, 0x36, 0x83, 0xaa, 0xde, 0x7e, 0xaf, 0x0f, 0xc3, 0x0e, 0x54, 0x97, 0x3c, 0xf4,
	0x26, 0x9e, 0x1f, 0xab, 0x6f, 0x13, 0xb5, 0x04, 0x3e, 0xf7, 0x63, 0xa1, 0x8a, 0xb9, 0xfb, 0x28,
	0x55, 0x86, 0x52, 0x09, 0x7c, 0xee, 0xc7, 0xf6, 0x58, 0xcd, 0x8b, 0xda, 0x92, 0xbb, 0x6a, 0x0a,
	0x37, 0xe6, 0x10, 0x0a, 0xfc, 0x21, 0xfd, 0x06, 0xc9, 0x04, 0xe9, 0xb3, 0xcc, 0x7d, 0x39, 0x69,
	0xfa, 0x8d, 0x8a, 0xa0, 0x99, 0xdb, 0x91, 0xf8, 0x18, 0x10, 0xff, 0x1c, 0x05, 0xbe, 0xeb, 0x27,
	0x93, 0x39, 0x4f, 0xee, 0x17, 0x9e, 0x98, 0x4a, 0xe3, 0xbf, 0x69, 0xda, 0xda, 0xe8, 0x4a, 0xd9,
	0xe0, 0x0f, 0x50, 0xe5, 0xf3, 0x29, 0xf7, 0x3c, 0x2e, 0x06, 0xf6, 0x0b, 0xfb, 0x4c, 0x69, 0xf7,
	0xd5, 0x57, 0x51, 0xac, 0xc9, 0x57, 0x5b, 0xf5, 0x15, 0x18, 0x0f, 0xfc, 0x29, 0x2d, 0x22, 0xa7,
	0x17, 0x72, 0xfb, 0x0f, 0xd5, 0x13, 0xbd, 0x17, 0xd7, 0x76, 0xee, 0x86, 0x88, 0xcf, 0x1b, 0x57,
	0x77, 0xaf, 0xf4, 0x52, 0xf7, 0xbe, 0x06, 0x4b, 0x97, 0x6e, 0x7c, 0x59, 0x8a, 0xd6, 0xd9, 0x1d,
	0xa8, 0xaf, 0xad, 0xc8, 0x57, 0xab, 0xb1, 0x7f, 0x57, 0xbd, 0x7e, 0xde, 0x84, 0xbb, 0x60, 0x8a,
	0xeb, 0xdd, 0xe8, 0x21, 0x14, 0xf8, 0x3d, 0x54, 0x22, 0x16, 0xb3, 0xf9, 0x72, 0x53, 0x4b, 0x53,
	0x95, 0x60, 0x1b, 0xf3, 0xe5, 0x2a, 0x48, 0x36, 0xb3, 0x4d, 0x75, 0xf6, 0x47, 0xd5, 0x2c, 0xb5,
	0x53, 0x5f, 0xe5, 0x7a, 0x00, 0xf0, 0xbc, 0x5d, 0x05, 0x8f, 0x99, 0xcf, 0x83, 0xcd, 0xa3, 0x90,
	0xaa, 0x74, 0x02, 0xb5, 0x51, 0x77, 0xc1, 0x7c, 0x64, 0xf1, 0x46, 0x7b, 0xa9, 0x98, 0x56, 0xe4,
	0x6f, 0xdd, 0xe1, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xf6, 0xd2, 0x90, 0xe4, 0x09, 0x00,
	0x00,
}
